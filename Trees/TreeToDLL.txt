Given a Binary Tree (BT), convert it to a Doubly Linked List(DLL) In-Place. The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be same as Inorder of the given Binary Tree. The first node of Inorder traversal (leftmost node in BT) must be the head node of the DLL.
Given two approaches see both..
1.
//In this approach you do inorder traversal and keep track of head and tail
void inr(Node *root,Node **head,Node **tail)
{
    if(root==NULL)
    return;
    inr(root->left,head,tail);
    if(*head==NULL)
    *head=root;
    if(*tail!=NULL)
    (*tail)->right=root;
    root->left=*tail;
    *tail=root;
    inr(root->right,head,tail);
}
class Solution
{
    public: 
    //Function to convert binary tree to doubly linked list and return it.
    Node * bToDLL(Node *root)
    {
        Node *head=NULL,*tail=NULL;
        inr(root,&head,&tail);
        return head;
        // your code here
    }
};


2.
//In this approach u go to left subtree and convert it to dll and then join it with root and do the same with right subtree recursively.


Node *util(Node *root)
{
    if(root==NULL)
    return root;
    if(root->left)
    {
        Node *left=util(root->left);
        while(left->right)
        {
            left=left->right;
        }
        root->left=left;
        left->right=root;
    }
    if(root->right)
    {
        Node  *right=util(root->right);
        while(right->left)
        right=right->left;
        root->right=right;
        right->left=root;
    }
    return root;
}
class Solution
{
    public: 
    //Function to convert binary tree to doubly linked list and return it.
    Node * bToDLL(Node *root)
    {
        Node *t=util(root);
        while(t->left)
        t=t->left;
        return t;
        // your code here
    }
};