

LOGIC: YOU BASICALLY CONNECT THE NODE THAT COMES JUST BEFORE THE CURRENT NODE IN INT INORDER TRAVERSAL WITH THE CURRENT NODE SO THAT YOU CAN COME BACK TO IT WHEN GOING LEFT WARDS IN THE INORDER FASHION.
YOU JUST CONNECT THE INORDER PREDECESSOR OF THE CURRENT NODE WITH IT AND IF THE YOU FIND IT ALREADY HAS THIS CONNECTED THEN YOU PRINT IT AND MOVE TO ITS RIGHT. GENEREALLY IF A NODE DOES NOT HAVE A LEFT THEN YOU JUST PRINT IT AND MOVE RIGHTWARDS. AND IF IT HAS LEFT THAT MEANS YOU NEED TO CHECK FOR PREDECESSOR CONNECTION AND IF NOT CONNECTED THEN CONNECT IT AND MOVE LEFTWARDS AND IF CONNECTED THEN PRINT AND MOVE RIGHTWARDS AFTER SEVERING THAT CONNECTION.


void MorrisTraversal(struct tNode* root)
{
    struct tNode *current, *pre;
  
    if (root == NULL)
        return;
  
    current = root;
    while (current != NULL) {
  
        if (current->left == NULL) {
            printf("%d ", current->data);
            current = current->right;
        }
        else {
  
            /* Find the inorder predecessor of current */
            pre = current->left;
            while (pre->right != NULL
                   && pre->right != current)
                pre = pre->right;
  
            /* Make current as the right child of its
               inorder predecessor */
            if (pre->right == NULL) {
                pre->right = current;
                current = current->left;
            }
  
            /* Revert the changes made in the 'if' part to
               restore the original tree i.e., fix the right
               child of predecessor */
            else {
                pre->right = NULL;
                printf("%d ", current->data);
                current = current->right;
            } /* End of if condition pre->right == NULL */
        } /* End of if condition current->left == NULL*/
    } /* End of while */
}
