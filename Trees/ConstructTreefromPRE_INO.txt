
Given 2 Arrays of Inorder and preorder traversal. Construct a binary tree . 

LOGIC:you know the first element in the preorder is root so take it as root and find its position in the inorder array all elements before it in the inorder array are in its left subtree and all elements after it are in its right subtree now find the preorder indexes for the desired left and right subtree and solve for them recursively with the same logic. you keep a map of element and index for inorder array to find the index of the root and ranges for the left and right subtrees. 



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int>& preorder,vector<int>& inorder,int ps,int pe,int is,int ie,map<int,int>& mp)
    {
    
        if(ps>pe||is>ie)
        return NULL;
        TreeNode *n=new TreeNode(preorder[ps]);
        int i=mp[preorder[ps]];  //finding position of  root in inorder array 
        n->left=solve(preorder,inorder,ps+1,ps+i-is,is,i-1,mp); //calling for left subtree with modified start and end of inorder and postorder arrays
        n->right=solve(preorder,inorder,ps+i-is+1,pe,i+1,ie,mp); //calling for right subtree with modified start and end of inorder and postorder arrays
        return n;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int ps=0,pe=preorder.size()-1,is=0,ie=inorder.size()-1;
        map<int,int> mp;
        for(int i=0;i<inorder.size();i++)
        {
            mp[inorder[i]]=i;
        }
        return solve(preorder,inorder,ps,pe,is,ie,mp);
    }
};
