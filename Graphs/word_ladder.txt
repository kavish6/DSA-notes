A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.



LOGIC: YOU BASICALLY DO A BFS TRAVERSAL TO FIND SHORTEST PATH YOU TAKE THE STARTING WORD AND ONE BY ONE TRY TO CHANGE ALL OF ITS CHARACTERS ONE AT ONCE FROM A TO Z AND CHECK IF THAT NEW WORD IS PRESENT IN THE DICTIONARY IF IT IS ADD IT TO THE QUEUE THEN AFTER THE CURRENT WORD IS OVER YOU POP FROM QUEUE AND CONTINUE BFS AND MAKING CHANGES SIMILARLY FOR ALL THE WORDS AND YOU ALSO USE A HASHSET FOR VISITED WORDS AND A HASHSET FOR CHECKING IF THE WORD IS PRESENT IN THE DICT THEN WHEN YOU GET THE END WORD FROM THE QUEUE YOUR PATH IS OVER AND THE COUNTER OF CHANGES THAT YOU MADE IS THE ANSWER.YOU BASICALLY DO LEVEL ORDER BFS(I.E YOU GET THE SIZE OF QUEUE FOR THE CURRENT LEVEL WHICH DENOTES THE NUMBER OF CHANGES RN AND FIRST POP THIS LEVEL THEN MOVE ON TO THE NEXT).


class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> st(wordList.begin(),wordList.end());
        if(st.find(endWord)==st.end())
            return 0;
        queue<string> q;
        q.push(beginWord);
        int cnt=0;
        while(!q.empty())
        {
            int n=q.size();
            cnt++;
            for(int i=0;i<n;i++)
            {
                string v=q.front();
                q.pop();
                if(v==endWord)
                    return cnt;
                for(int j=0;j<v.size();j++)
                {
                    char c=v[j];
                    for(int k=0;k<26;k++)
                    {
                        v[j]='a'+k;
                        if(st.find(v)!=st.end())
                        {
                            q.push(v);
                            st.erase(v);
                        }
                    }
                    v[j]=c;
                }
            }
        }
        return 0;
    }
};
