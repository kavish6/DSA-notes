A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> st(wordList.begin(),wordList.end());
        if(st.find(endWord)==st.end())
            return 0;
        queue<string> q;
        q.push(beginWord);
        int cnt=0;
        while(!q.empty())
        {
            int n=q.size();
            cnt++;
            for(int i=0;i<n;i++)
            {
                string v=q.front();
                q.pop();
                if(v==endWord)
                    return cnt;
                for(int j=0;j<v.size();j++)
                {
                    char c=v[j];
                    for(int k=0;k<26;k++)
                    {
                        v[j]='a'+k;
                        if(st.find(v)!=st.end())
                        {
                            q.push(v);
                            st.erase(v);
                        }
                    }
                    v[j]=c;
                }
            }
        }
        return 0;
    }
};