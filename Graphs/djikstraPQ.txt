// Program to find Dijkstra's shortest path using
Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between each node and Source vertex S.





USING PRIORITY QUEUE
LOGIC : you take a min heap and push dist,node in it and keep a distance array that stores distances from source to each node. then you push the dist as 0 and node as source to the priority queue and mark the dist for source as zero now look at the neighbors and see if their distance by adding the weight of edge and the current distance of the parent node is lesser than the existing distance in the dist array and if less then change the dist array and push the new dist,node to the min heap. go on till the heap is empty.


vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> dist(V,INT_MAX);
        pq.push({0,S});
        dist[S]=0;
        while(!pq.empty())
        {
            auto x=pq.top();
            pq.pop();
            for(auto z:adj[x.second])
            {
                if(dist[z[0]]>x.first+z[1])
                {
                    dist[z[0]]=x.first+z[1];
                    pq.push({x.first+z[1],z[0]});
                }
            }
        }
        return dist;
        
        // Code here
    }
