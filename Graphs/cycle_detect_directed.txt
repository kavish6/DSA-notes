// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclicUtil(int v,vector<int> adj[],vector<bool>& vis,vector<bool>& recs)
    {
        if(!vis[v])
        {
            vis[v]=true;
            recs[v]=true;
            for(auto it:adj[v])
            {
                if(!vis[it]&&isCyclicUtil(it,adj,vis,recs))
                return true;
                if(recs[it])
                return true;
            }
        }
        recs[v]=false;
        return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<bool> vis(V,false),recs(V,false);
        for(int i=0;i<V;i++)
        {
            if(!vis[i]&&isCyclicUtil(i,adj,vis,recs))
            return true;
        }
        return false;
        
    }
};

// { Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}
  // } Driver Code Ends