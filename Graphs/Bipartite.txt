check if a graph is bipartitie or not (bipartite means if its vertices can be put in two sets which only have inter edges not intra) 


// we think of all vertices having one of 2 colors if adjacent vertices have same color the graph is not bipartite


LOGIC : WE USE DFS WITH 2 COLORING ALGORITHM WE CHECK IF THE GRAPH CAN WE COLORED WITH 2 COLORS WITH NO CONSECUTIVE NODES HAVING THE SAME COLOR, WE USE A COLOR ARRAY AND ASSIGN A COLOR TO THE FIRST NODE THEN DO DFS AND CHECK FOR ALL CONNECTED NODES BY ASSIGNING ALTERNATE COLORS AND IF WE CANNOT THEN WE RETURN FALSE.

bool dfs(int i,vector<vector<int>> & graph,vector<int>& col,int c)
  {
    col[i]=c;
    for(auto x:graph[i])
    {
      if(col[x]==-1)
      {
        if(!dfs(x,graph,col,!c))
        return false;
      }
      else 
      {
        if(col[x]==c)
        return false;
      }
    }
    return true;
  }
    bool isBipartite(vector<vector<int>>& graph) {
      vector<int> col(graph.size(),-1);
      for(int i=0;i<graph.size();i++)
      {
        if(col[i]==-1)
        {
          if(!dfs(i,graph,col,0))
          return false;
        }
      }
      return true;
    }
