You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.

All of the tickets belong to a man who departs from "JFK", thus, the itinerary must begin with "JFK". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.

    For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].

You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.


LOGIC: First make adjacency matrix then sort all the indivual neighbours for each node then do dfs from jfk and keep a route array and a temp array , the temp array stores the current itinerary and the path array has the final itinerary do greedy dfs and if the temp array size is equal to ticketssize +1 then make it as route else backtrack and remove all the steps from temp. 




class Solution {
public:
    unordered_map<string, vector<string>> graph;
    vector<string> route;
    int numTickets = 0;
    
    vector<string> findItinerary(vector<vector<string>>& tickets) {
		numTickets = tickets.size();
        
        if (numTickets == 0){
			return route;
		}
        
        // Construct the node and assign outgoing edges
		for (auto& eachTicket : tickets){
			graph[eachTicket[0]].push_back(eachTicket[1]);
		}
        
        // Sort vertices in the adjacency list by lexical order
        for (auto& edges : graph) {
            sort(edges.second.begin(), edges.second.end());
        }
        
        vector<string> temp;
        dfsRoute("JFK", temp);
        return route;
    }
    
    void dfsRoute(string fromAirport, vector<string>& temp) {
        temp.push_back(fromAirport);
        
        // we have used all tickets, this is a valid path return the result
        if (temp.size() == numTickets+1) {
            route = temp;
            return;
        }
        
        vector<string>& neighbors = graph[fromAirport];
        
        // at the current layer, try its neighbors in the sorted order
        for(int i =0; route.empty() &&i< neighbors.size(); i++) {
            string toAirport = neighbors[i];
            
            // remove ticket(route) from graph so that it won't be reused 
            neighbors.erase(neighbors.begin()+i);
            dfsRoute(toAirport, temp);
            // if the current path is invalid, restore the current ticket
            neighbors.insert(neighbors.begin()+i, toAirport);            
        }
        
        // remove the current vertice
        temp.pop_back();
    }
};
