Given a sorted dictionary of an alien language having N words and k starting alphabets of standard dictionary. Find the order of characters in the alien language.
Note: Many orders may be possible for a particular test case, thus you may return any valid order and output will be 1 if the order of string returned by the function is correct else 0 denoting incorrect string returned.



// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++
class Solution{
    public:
    void Dfs(int i,vector<int> adj[],stack<int>& s,int K,vector<bool>& vis)
    {
        vis[i]=true;
        for(auto it:adj[i])
        {
            if(!vis[it])
            {
                vis[it]=true;
                Dfs(it,adj,s,K,vis);
            }
        }
        s.push(i);
    }
    void topologicalSort(vector<int> adj[],int K,string& ans)
    {
        vector<bool> vis(K,false);
        stack<int> s;
        for(int i=0;i<K;i++)
        {
            if(!vis[i])
            Dfs(i,adj,s,K,vis);
        }
        while(!s.empty())
        {
            ans+=s.top()+'a';
            s.pop();        }
    }
    string findOrder(string dict[], int N, int K) {
        vector<int> adj[K];
        string ans;
        for(int i=0;i<N-1;i++)
        {
            string w1=dict[i],w2=dict[i+1];
            for(int j=0;j<min(w1.length(),w2.length());j++)
            {
                if(w1[j]!=w2[j])
                {
                    adj[w1[j]-'a'].push_back(w2[j]-'a');
                    break;
                }
            }
        }
        topologicalSort(adj,K,ans);
        return ans;
        //code here
    }
};

// { Driver Code Starts.
string order;
bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size()) return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;
        string dict[N];
        for (int i = 0; i < N; i++) cin >> dict[i];
        
        Solution obj;
        string ans = obj.findOrder(dict, N, K);
        order = "";
        for (int i = 0; i < ans.size(); i++) order += ans[i];

        string temp[N];
        std::copy(dict, dict + N, temp);
        sort(temp, temp + N, f);

        bool f = true;
        for (int i = 0; i < N; i++)
            if (dict[i] != temp[i]) f = false;

        if(f)cout << 1;
        else cout << 0;
        cout << endl;
    }
    return 0;
}
  // } Driver Code Ends