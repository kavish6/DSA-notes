STRIVER'S CODE FOR DISJOIN SET DATA STUCTURE
IMPLEMENTING THE UNION AND FINDPARENT WITH PATH COMPRESSION
COMPLEXITY OF UNION AND FINDPARENT IS 0(1)

LOGIC: WE USE THIS WHEN WE WANT TO FIND THE CONNECTED COMPONENTS AND TO REMEMBER THAT AFTER ALL THE CONNECTIONS THE NUMBER OF NODES THAT ARE ULTIMATE PARENTS OF THEMSELVES IS THE NUMBER OF COMPONENTS.

class DisjointSet {
    vector<int> rank, parent, size; 
public: 
    DisjointSet(int n) {
        rank.resize(n+1, 0); 
        parent.resize(n+1);
        size.resize(n+1); 
        for(int i = 0;i<=n;i++) {
            parent[i] = i; 
            size[i] = 1; 
        }
    }

    int findUPar(int node) {
        if(node == parent[node])
            return node; 
        return parent[node] = findUPar(parent[node]); 
    }
	void unionByRank(int u, int v) {
        int ulp_u = findUPar(u); 
        int ulp_v = findUPar(v); 
        if(ulp_u == ulp_v) return; 
        if(rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v; 
        }
        else if(rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u; 
        }
        else {
            parent[ulp_v] = ulp_u; 
            rank[ulp_u]++; 
        }
    }


   void unionBySize(int u, int v) {
        int ulp_u = findUPar(u); 
        int ulp_v = findUPar(v); 
        if(ulp_u == ulp_v) return; 
        if(size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v; 
            size[ulp_v] += size[ulp_u]; 
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v]; 
        }
    }
};





Problem based GFG SOLUTION:





This problem is to implement disjoint set union. There will be 2 incomplete functions namely union and find. You have to complete these functions. 
//given algo is optimized by using path compression and union by rank


class Solution
{
    public:
    //Function to merge two nodes a and b.
    int findRoot(int a,int par[])
    {
        while(a!=par[a])
        {
            a=par[a];
        }
        return a;
    }
    
    void union_( int a, int b, int par[], int rank1[]) 
    {
        
        int x= findRoot(a,par);
        int y= findRoot(b,par);
        if(rank1[x]>=rank1[y])
        {
            rank1[x]++;
            par[y]=x;
        }
        else
        {
            rank1[y]++;
            par[x]=y;
        }
        //code here
    }
    
    //Function to check whether 2 nodes are connected or not.
    bool isConnected(int x,int y, int par[], int rank1[])
    {
        return (findRoot(x,par)==findRoot(y,par));
        //code here
    }
};
