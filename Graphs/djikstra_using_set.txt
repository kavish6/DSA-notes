Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between each node and Source vertex S.


LOGIC: just use the same logic as min heap.

vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        set<pair<int,int>> st;
        vector<int> dist(V,INT_MAX);
        st.insert({0,S});
        dist[S]=0;
        while(!st.empty())
        {
            auto x=*(st.begin());
            st.erase(x);
            for(auto z:adj[x.second])
            {
                if(dist[z[0]]>x.first+z[1])
                {
                    if(dist[z[0]]!=INT_MAX)
                    st.erase({dist[z[0]],z[0]});
                    dist[z[0]]=x.first+z[1];
                    st.insert({x.first+z[1],z[0]});
                }
            }
        }
        return dist;
        
        // Code here
    }
