A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.


Two pointer Approach : o(n) and O(1)
LOGIC: YOU FIRST TAKE TWO POINTERS AND ELIMINATE PEOPLE IF THEY KNOW ANYONE AS I=0 AND J=N-1 SO IF J KNOWS I THEN J-- AND IF NOT THEN I++.
	



int celebrity(vector<vector<int> >& M, int n) 
    {
     
        int i=0,j=n-1;
        while(i<j)
        {
            if(M[j][i])
            {
                j--;
            }
            else
            {
                i++;
            }
        }
        for(int x=0;x<n;x++)
        {
            if(x!=i)
            {
                if(M[x][i]==0||M[i][x]==1)
                {
                    return -1;
                }
            }
        }
        return i;
        
        // code here 
    }





Stack Approach:o(n) and o(n)

You can use a stack based approach like this(or u can search this on gfg and use the two pointer method much better than this and simpler and this one has o(n) time and o(n) space complexity while two pointer has only o(n) time and o(1) space complexity):


//code
    bool Knows(int a ,int b,vector<vector<int>> &M)
    {
        return M[a][b];
    }
class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        int ans;
        stack<int> s;
        for(int i=0;i<n;i++)
        {
           s.push(i);
        }
        while(s.size()>1)
        {
            int a=s.top();
            s.pop();
            int b=s.top();
            s.pop();
            if(Knows(a,b,M))
            {
                s.push(b);
            }
            else
            s.push(a);
        }
        if(s.empty())
        return -1;
        ans=s.top();
        for(int i=0;i<n;i++)
        {
            if(Knows(ans,i,M))
            return -1;
            if(!Knows(i,ans,M)&&i!=ans)
            return -1;
        }
        return ans;
        // code here 
    }
};
