OPTIMIZED SOLUTION YOU HASH FOR ROW AND BOTH DIAGONALS
MAKE RELATION FOR INDEXING BASED ON OBSERVATION THERE ARE 2N-1 DIAGONALS.
IN THIS ONE THE ANS IS ARRAY OF STRING AS ["..Q.","Q...",..] LIKE THIS.

class Solution {
public:
    void solve(vector<string> curr,int col,vector<vector<string>> &ans,vector<bool>& row,vector<bool> &leftdia,vector<bool>& rightdia,int n)
    {
        if(col==n)
        {
            ans.push_back(curr);
            return ;
        }
        for(int i=0;i<n;i++)
        {
            if(!row[i]&&!leftdia[i+col]&&!rightdia[n-1-(i-col)])
            {
                curr[i][col]='Q';
                row[i]=1;
                leftdia[i+col]=1;
                rightdia[n-1-(i-col)]=1;
                solve(curr,col+1,ans,row,leftdia,rightdia,n);
                curr[i][col]='.';
                row[i]=0;
                leftdia[i+col]=0;
                rightdia[n-1-(i-col)]=0;
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        string t(n,'.');
        vector<string> curr(n,t);
        vector<bool> row(n,false),leftdia((2*n)-1,false),rightdia((2*n)-1,false);
        solve(curr,0,ans,row,leftdia,rightdia,n);
        return ans;
    }
};



BRUTE FORCE SIMPLE SOLUTION O(N^3)

class Solution{
public:
bool isPossible(vector<vector<bool>>& grid,int i,int col,int n)
{
    for(int j=0;j<col;j++)
    {
        if(grid[i][j])
        return false;
    }
    for(int j=i,k=col;j<n&&k>=0;j++,k--)
    {
        if(grid[j][k])
        return false;
    }
    for(int j=i,k=col;j>=0&&k>=0;j--,k--)
    {
    if(grid[j][k])
        return false;
    }
    return true;
}
 bool findcomb(int col,int n,vector<vector<int>>& res,vector<vector<bool>>& grid)
    {
        if(col==n)
        {
            vector<int> v;
            for(int i=0;i<n;i++)
            {
                for(int j=0;j<n;j++)
                {
                    if(grid[i][j])
                    {
                        v.push_back(j+1);
                    }
                }
            }
            res.push_back(v);
            return true;
        }
        bool ans=false;
        for(int i=0;i<n;i++)
        {
            if(isPossible(grid,i,col,n))
            {
                grid[i][col]=true;
                ans=findcomb(col+1,n,res,grid) || ans;
                grid[i][col]=false;
            }
        }
        return ans;
    }
    vector<vector<int>> nQueen(int n) {
        // code here
        vector<vector<int>> res;
        vector<bool> temp(n,false);
        vector<vector<bool>> grid(n,temp);
        bool x=findcomb(0,n,res,grid);
        if(!x)
        return {};
        sort(res.begin(),res.end());
        return res;
    }
};
