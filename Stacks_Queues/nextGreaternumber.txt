Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

LOGIC:You basically traverse the array two times for the end and maintain a stack which has elements in descending order and when you get to the initial array you check if stack has elements lesser than it you pop them and then put the stack.top() as next greater element for that index and then push that element to the stack and continue leftwards.

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        stack<int> st;
        vector<int> ans(nums.size(),-1);
        for(int i=nums.size()*2 - 1;i>=0;i--)
        {
            while(!st.empty()&&nums[st.top()]<=nums[i%nums.size()])
            {
                st.pop();
            }
            if(i<nums.size())
            {
                if(!st.empty())
                {
                    ans[i]=nums[st.top()];
                }
                else
                ans[i]=-1;
            }
            st.push(i%nums.size());
        }
        return ans;
    }
};




