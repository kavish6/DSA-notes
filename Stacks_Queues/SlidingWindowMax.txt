You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.



LOGIC:YOU MAINTAIN A DEQUE WHICH HAS ELEMENTS IN THE WAY THAT YOU USE FOR PREVIOUS LARGER ELEMENT BASICALLY YOU POP FROM BACK IF TILL THE LAST ELEMENT IS LARGER THAN THE CURRENT AND THEN YOU PUSH THE CURRENT SO YOU GET THE MAX ELEMENT AT THE FRONT OF THE QUEUE AND THE QUEUE IS IN DECREASING ORDER THEN WHEN THE INDEX OF FRONT ELEMENT EXCEEDS THE WINDOW SIZE YOU POP FROM THE FRONT.

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> ans;
        deque<int> q;
        for(int i=0;i<k;i++)
        {
            while(!q.empty()&&nums[q.back()]<=nums[i])
            {
                q.pop_back();
            }
            q.push_back(i);
        }
        ans.push_back(nums[q.front()]);
        for(int i=k;i<nums.size();i++)
        {
            while(!q.empty()&&nums[q.back()]<=nums[i])
            {
                q.pop_back();
            }
            q.push_back(i);
            while(!q.empty()&&(i-q.front()+1)>k)
            {
                q.pop_front();
            }
            ans.push_back(nums[q.front()]);
        }
        return ans;
    }
};
