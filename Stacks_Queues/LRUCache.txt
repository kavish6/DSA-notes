Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

    LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
    int get(int key) Return the value of the key if the key exists, otherwise return -1.
    void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.

The functions get and put must each run in O(1) average time complexity.



LOGIC: YOU USE A MAP THAT STORES THE LOCATION OR POINTER TO THE NODE THAT STORES THE KEY VALUE PAIR AND PUT THESE NODES IN A DOUBLY LINKED LIST THEN WHEN YOU DO:
1) GET: YOU CHECK IF YOU HAVE THAT KEY IN MAP IF YOU HAVE IT THEN DELETE THE NODE FROM LINKED LIST AND CREATE A NEW NODE WITH SAME VALUES AND ADD IT NEXT TO HEAD IN THE LIST IF YOU DON'T HAVE THE KEY THEN RETURN -1;
2) PUT: IF THE KEY IS PRESENT THEN SIMPLY DELETE THE CURRENT NODE WITH THAT VALUE IN LL AND CREATE NEW NODE WITH THE KEY AND VALUE AND ADD IT NEXT TO THE HEAD IF THE KEY IS NOT PRESENT ALREADY THEN CHECK IF THE CAPACITY IS FULL OR NOT IF NOT FULL THEN CREATE A NEW NODE AND ADD IT NEXT TO HEAD AND IF THE THE CAPACITY IS MAX THEN DELETE THE NODE PREV TO TAIL AND CREATE A NEW NODE AND THAT NODE NEXT TO HEAD WITH THE GIVEN KEY VALUE PAIR.


class LRUCache {
  public:
    class node {
      public:
        int key;
      int val;
      node * next;
      node * prev;
      node(int _key, int _val) {
        key = _key;
        val = _val;
      }
    };

  node * head = new node(-1, -1);
  node * tail = new node(-1, -1);

  int cap;
  unordered_map < int, node * > m;

  LRUCache(int capacity) {
    cap = capacity;
    head -> next = tail;
    tail -> prev = head;
  }

  void addnode(node * newnode) {
    node * temp = head -> next;
    newnode -> next = temp;
    newnode -> prev = head;
    head -> next = newnode;
    temp -> prev = newnode;
  }

  void deletenode(node * delnode) {
    node * delprev = delnode -> prev;
    node * delnext = delnode -> next;
    delprev -> next = delnext;
    delnext -> prev = delprev;
  }

  int get(int key_) {
    if (m.find(key_) != m.end()) {
      node * resnode = m[key_];
      int res = resnode -> val;
      m.erase(key_);
      deletenode(resnode);
      addnode(resnode);
      m[key_] = head -> next;
      return res;
    }

    return -1;
  }

  void put(int key_, int value) {
    if (m.find(key_) != m.end()) {
      node * existingnode = m[key_];
      m.erase(key_);
      deletenode(existingnode);
    }
    if (m.size() == cap) {
      m.erase(tail -> prev -> key);
      deletenode(tail -> prev);
    }

    addnode(new node(key_, value));
    m[key_] = head -> next;
  }
};
