Given a set of N jobs where each jobi has a deadline and profit associated with it.

Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with job if and only if the job is completed by its deadline.

Find the number of jobs done and the maximum profit.

Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job.


A slightly more intuitive code ..

class Solution 
{
    public:
    //function used for sorting all jobs according to decreasing profit.
    static bool comparison(Job a, Job b) 
    { 
    	return (a.profit > b.profit); 
    } 
    
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        int res = 0, count = 0;
        
    	//sorting all jobs according to decreasing order of profit.
    	sort(arr, arr+n, comparison); 
    
        //array to store result (Sequence of jobs). 
    	int result[n];
    	//boolean array to keep track of free time slots.
    	bool slot[n]; 
    
    	//initializing all slots to free.
    	for (int i=0; i<n; i++) 
    		slot[i] = false; 
    
    	//iterating through all given jobs.
    	for (int i=0; i<n; i++) 
    	{ 
        	//finding a free slot for current job (Note that we start 
        	//from the last possible slot). 
        	for (int j=min(n, arr[i].dead)-1; j>=0; j--) 
        	{ 
        		//if free slot is found, we add current job to result array
        		//and make the current slot occupied. 
        		if (slot[j]==false) 
        		{ 
        			result[j] = i;  
        			slot[j] = true; 
        			break; 
        		} 
        	} 
    	} 
    
    	for (int i=0; i<n; i++)
    	{ 
    	    //if slot is occupied, we update the counter and 
    	    //add its profit in final result.
        	if (slot[i]) {
        	    count++;
        	    res += arr[result[i]].profit;
        	}
    	}
    	
    	//storing the count of jobs and max profit in a list and returning it.
    	vector<int> ans;
    	ans.push_back(count);
    	ans.push_back(res);
    	return ans;
    } 
};







This is highly optimized no intuitive code TC:O(nlogn) and LC:O(1)

/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/ 
bool comp(Job a,Job b)
{
    if(a.dead<b.dead)
    return true;
    return false;
}
struct mostProfit{
            bool operator()(Job const& a,Job const& b){
                return a.profit<b.profit;
            }
        };
class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        vector<int> ans(2,0);
        sort(arr,arr+n,comp);
        int top=0,md=n+1;
        
        priority_queue<Job,vector<Job>,mostProfit> pq;
        int space=0;
        for(int i=n-1;i>=0;i--)
        {
            if(i!=0)
            space=arr[i].dead-arr[i-1].dead;
            else
            space=arr[i].dead;
            pq.push(arr[i]);
            while(space>0&&pq.size()>0)
            {
                Job temp=pq.top();
                pq.pop();
                space--;
                ans[0]++;
                ans[1]+=temp.profit;
            }
        }
        return ans;
        // your code here
    } 
};
