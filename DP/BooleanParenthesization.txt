Given a boolean expression S of length N with following symbols.
Symbols
    'T' ---> true
    'F' ---> false
and following operators filled between symbols
Operators
    &   ---> boolean AND
    |   ---> boolean OR
    ^   ---> boolean XOR
Count the number of ways we can parenthesize the expression so that the value of expression evaluates to true.




#define NUM 1003
class Solution{
public:
    int t[200][200][2];
    int solve(string &s,int i,int j,bool nd)
    {
        if(i>j)
        return 0;
        if(t[i][j][nd]!=-1)
        return t[i][j][nd];
        if(i==j)
        {
            if(nd==true)
            {
                if(s[i]=='T')
                return 1;
                return 0;
            }
            else
            {
                if(s[i]=='F')
                return 1;
                return 0;
            }
            }
        
        int ans=0;
        for(int k=i+1;k<j;k+=2)
        {
            int lt=solve(s,i,k-1,true);
            int lf=solve(s,i,k-1,false);
            int rt=solve(s,k+1,j,true);
            int rf=solve(s,k+1,j,false);
            if(s[k]=='&')
            {
                if(nd)
                {
                    ans+=(lt*rt)%NUM;
                }
                else
                {
                    ans+=((lt*rf) + (lf*rt) + (lf*rf))%NUM;
                }
            }
            else if(s[k]=='|')
            {
                if(nd)
                {
                    ans+=((lt*rt)+(lf*rt)+(lt*rf))%NUM;
                }
                else
                {
                    ans+=(lf*rf)%NUM;
                }
            }
            else
            {
                if(nd)
                {
                    ans+=((lt*rf)+(lf*rt))%NUM;
                }
                else
                {
                    ans+=((lt*rt)+(lf*rf))%NUM;
                }
            }
        }
        return t[i][j][nd]=ans;
    }
    int countWays(int N, string S){
        memset(t,-1,sizeof(t));
        return solve(S,0,N-1,true)%NUM;
        // code here
    }
};
