Given a string A and a dictionary of n words B, find out if A can be segmented into a space-separated sequence of dictionary words.

Note: From the dictionary B each word can be taken any number of times and in any order.



LOGIC: you put all the members of the dictionary in a set then you call another helper function with the set and the given string and you break the string at every index and search for the first part of it in the set and rest part of the string gets called recursively in the helper function.

class Solution {
public:
    int dp[301];
    bool solve(string s,int start,unordered_set<string>& st)
    {
        if(start==s.length())
        return true;
        if(dp[start]!=-1)
        return dp[start];
        for(int i=start+1;i<=s.length();i++){
            if(st.find(s.substr(start,i-start))!=st.end())
            {
                if(solve(s,i,st))
                return dp[start]=true;
            }
        }
        return dp[start]=false;
    }
    bool wordBreak(string s, vector<string>& wordDict) {
        memset(dp,-1,sizeof(dp));
        unordered_set<string> st(wordDict.begin(),wordDict.end());
        return solve(s,0,st);

    }
};
