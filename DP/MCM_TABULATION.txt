Given a sequence of matrices, find the most efficient way to multiply these matrices together. The efficient way is the one that involves the least number of multiplications.
The dimensions of the matrices are given in an array arr[] of size N (such that N = number of matrices + 1) where the ith matrix has the dimensions (arr[i-1] x arr[i]).


LOGIC: Basically take start and end points and partition the array between them.

int matrixMultiplication(int N, int arr[])
    {
        int dp[N][N];
        for(int i=0;i<N;i++)
        {
            dp[i][i]=0;
        }
        for(int i=N-1;i>=0;i--)
        {
            for(int j=i+1;j<N;j++)
            {
                int steps=INT_MAX;
        for(int k=i;k<j;k++)
        {
            int c1=dp[i][k];
            int c2=dp[k+1][j];
            int c3=arr[i-1]*arr[k]*arr[j];
            steps=min(steps,c1+c2+c3);
        }
        dp[i][j]=steps;
            }
        }
        return dp[1][N-1];
        
        // memset(dp,-1,sizeof(dp));
        // return solve(arr,1,N-1);
        // code here
    }
