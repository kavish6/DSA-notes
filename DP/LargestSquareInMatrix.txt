Given a binary matrix mat of size n * m, find out the maximum size square sub-matrix with all 1s.


//Basically take an i,j and assume it is the rightmost and bottommost end of a square and use (i-1,j),(i-1,j-1) and (i-1,j-1) squares to calculate its dimension. 

    int dp[51][51];
    int solve(int i,int j,vector<vector<int>>& mat)
    {
        if(i==0||j==0)
        {
            if(mat[i][j])
            return 1;
            return 0;
        }
        if(dp[i][j]!=-1)
        return dp[i][j];
        if(mat[i][j]==0)
        return dp[i][j]=0;
        if(mat[i][j]==1)
        {
            return dp[i][j]=1+min(solve(i-1,j,mat),min(solve(i-1,j-1,mat),solve(i,j-1,mat)));
        }
    }
    int maxSquare(int n, int m, vector<vector<int>> mat){
        // code here
        memset(dp,-1,sizeof(dp));
        int ans=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=m-1;j>=0;j--)
            {
            ans=max(ans,solve(i,j,mat));
            }
        }
     return ans;   
    }
};
