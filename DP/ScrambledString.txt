We can scramble a string s to get a string t using the following algorithm:

    If the length of the string is 1, stop.
    If the length of the string is > 1, do the following:
        Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
        Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.
        Apply step 1 recursively on each of the two substrings x and y.

Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.

public:
    unordered_map<string,bool> mp;
    bool solve(string s1,string s2)
    {
        if(s1==s2)
            return true;
        int n=s1.length();
        if(n<=1)
            return false;
        string key=s1;
        key+=" "+s2;
        if(mp.find(key)!=mp.end())
        {
            return mp[key];
        }
        for(int i=1;i<n;i++)
        {
            bool a=solve(s1.substr(0,i),s2.substr(n-i,i))&&solve(s1.substr(i,n-i),s2.substr(0,n-i));
            bool b=solve(s1.substr(0,i),s2.substr(0,i))&&solve(s1.substr(i,n-i),s2.substr(i,n-i));
            if(a||b)
                return mp[key]=true;
        }
        return mp[key]=false;
    }
    bool isScramble(string s1, string s2) {
        if(s1.length()!=s2.length())
            return false;
      return solve(s1,s2);
    }
};
