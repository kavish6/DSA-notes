Given a string str, a partitioning of the string is a palindrome partitioning if every sub-string of the partition is a palindrome. Determine the fewest cuts needed for palindrome partitioning of the given string.


Memoized:

class Solution{
public:
    int t[500][500];
    bool isPali(string &str,int i,int j)
    {
        while(i<j)
        {
            if(str[i]!=str[j])
            return false;
            i++;
            j--;
        }
        return true;
    }
    int solve(string &str,int i,int j)
    {
        if(i>j)
        return INT_MAX;
        if(t[i][j]!=-1)
        return t[i][j];
        if(isPali(str,i,j))
        return 0;
        int mx=INT_MAX;
        for(int k=i;k<j;k++)
        {
            mx=min(mx,solve(str,i,k)+solve(str,k+1,j));
        }
        return t[i][j]=mx+1;
    }
    int palindromicPartition(string str)
    {
        memset(t,-1,sizeof(t));
        return solve(str,0,str.length()-1);
        // code here
    }
};





Iterative..

bool isPali(string &str,int i,int j)
    {
        while(i<j)
        {
            if(str[i]!=str[j])
            return false;
            i++;
            j--;
        }
        return true;
    }

int palindromicPartition(string str)
    {
        int n=str.length();
        int dp[n][n];
        for(int i=0;i<n;i++)
        {
            dp[i][i]=0;
        }
        for(int l=1;l<=n;l++)
        {
            for(int i=0;i<n-l+1;i++)
            {
                int j=i+l-1;
                dp[i][j]=INT_MAX;
                if(isPali(str,i,j))
                dp[i][j]=0;
                else
                {
                for(int k=i;k<j;k++)
                {
                    dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+1);
                }
                }
            }
        }
        return dp[0][n-1];
        // code here
    }
