Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the kâ€™th position of the final sorted array.


using divide and conquer..this has log(N)+log(M) time complexity u can also use the merge sort logic but that would make the time complexity as 0(N+M).

int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        k=k-1;
        int low1=0,high1=n;
        int low2=0,high2=m;
        while(high1<=n&&low1>-1&&high2<=m&&low2>-1)
        {
            if(high1==low1)
            return arr2[low2+k];
            if(high2==low2)
            return arr1[low1+k];
            int mid1=(high1-low1)/2;
            int mid2=(high2-low2)/2;
            if(mid1+mid2<k)
            {
                if(arr1[low1+mid1]<arr2[low2+mid2])
                {
                    low1=low1+mid1+1;
                    k=k-mid1-1;
                }
                else
                {
                low2=low2+mid2+1;
                k=k-mid2-1;
                }
            }
            else
            {
                if(arr1[low1+mid1]<arr2[low2+mid2])
                {
                    high2=low2+mid2;
                }
                else
                high1=low1+mid1;
            }
        }
        
        
    }