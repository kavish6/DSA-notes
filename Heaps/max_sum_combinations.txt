Given two integer array A and B of size N each.
A sum combination is made by adding one element from array A and another element of array B.
Return the maximum K valid distinct sum combinations from all the possible sum combinations.

Note : Output array must be sorted in non-increasing order.





Logic: You take last two elements and then keep one last element as it is and reduce index by 1 in other array do the same for the other array and push these elements in heap then do this for the elements pushed earlier.
YOu keep set to remove duplicates.

class Solution {
  public:
    vector<int> maxCombinations(int N, int K, vector<int> &A, vector<int> &B) {
        // code here
        sort(A.begin(),A.end());
        sort(B.begin(),B.end());
        priority_queue<pair<int,pair<int,int>>> pq;
        set<pair<int,int>> st;
        vector<int> ans;
        pq.push({A[N-1]+B[N-1],{N-1,N-1}});
        st.insert({N-1,N-1});
        while(K>0)
        {
            auto top=pq.top();
            int f=top.second.first;
            int s=top.second.second;
            pq.pop();
            ans.push_back(top.first);
            if(f>0&&s>0&&st.find({f-1,s})==st.end())
            {
                pq.push({A[f-1]+B[s],{f-1,s}});
                st.insert({f-1,s});
                
            }
            if(s>0&&f>0&&st.find({f,s-1})==st.end())
            {
                pq.push({A[f]+B[s-1],{f,s-1}});
                st.insert({f,s-1});
                
            }
            K--;
        }
        return ans;
        
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;

        vector<int> A(N), B(N);
        for (int i = 0; i < N; i++) {
            cin >> A[i];
        }
        for (int i = 0; i < N; i++) {
            cin >> B[i];
        }
        Solution obj;
        vector<int> ans = obj.maxCombinations(N, K, A, B);
        for (auto &it : ans) cout << it << ' ';
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
