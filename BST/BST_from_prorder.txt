Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.




LOGIC: YOU ITERATE THE PREORDER TAKE THE FIRST ELEMENT AS ROOT THEN IT LEFT SUBTREE WILL BE TILL THE ELEMENT THAT IS LESSER THAN THE ROOT AND ALL THE ELEMENTS AFTER IT WILL BE IN THE RIGHT SUBTREE. SO JUST SET AN UPPER BOUND AND CHECK FOR IT.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int i=0;
    TreeNode* solve(vector<int>& preorder,int upper)
    {
        if(i<preorder.size()&&preorder[i]<upper)
        {
            TreeNode* node= new TreeNode(preorder[i++]);
            node->left=solve(preorder,preorder[i-1]);
            node->right=solve(preorder,upper);
            return node;
        }
        return NULL;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        return solve(preorder,INT_MAX);
    }
};
