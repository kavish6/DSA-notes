You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


LOGIC: basically u take an i as partition and compute left max profit and right max profit.then compare the sum of both side for all i.

class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        int mx=0;
        int mn=INT_MAX;
         if(n<=1)
            return 0;
        vector<int> pfrl(n,0);
        vector<int> pfrr(n,0);
        for(int i=0;i<n;i++)
        {
            if(mn>prices[i])
            {
                mn=prices[i];
                if(i!=0)
                    pfrl[i]=pfrl[i-1];
            }
            else
            {
                pfrl[i]=max(pfrl[i-1],prices[i]-mn);
            }
        }
        for(int i=n-1;i>=0;i--)
        {
            if(mx<=prices[i])
            {
                mx=prices[i];
                if(i!=n-1)
                    pfrr[i]=pfrr[i+1];
            }
            else
            {
                pfrr[i]=max(pfrr[i+1],mx-prices[i]);
            }
        }
        mx=pfrl[n-1];
        for(int i=0;i<n-1;i++)
        {
            if(mx<(pfrl[i]+pfrr[i+1]))
            {
                mx=pfrl[i]+pfrr[i];
            }
        }
        return mx;   
    }
};
