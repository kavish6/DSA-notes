You are given a string S of 2N characters consisting of N ‘[‘ brackets and N ‘]’ brackets. A string is considered balanced if it can be represented in the for S2[S1] where S1 and S2 are balanced strings. We can make an unbalanced string balanced by swapping adjacent characters. Calculate the minimum number of swaps necessary to make a string balanced.
Note - Strings S1 and S2 can be empty.


int minimumNumberOfSwaps(string S){
        // code here 
        vector<int> pos;
       int sum=0,count=0,p=0;
       for(int i=0;i<S.length();i++)
       {
           if(S[i]=='[')
            pos.push_back(i);
       }
       for(int i=0;i<S.length();i++)
       {
           if(S[i]=='[')
           {
           count++;
           p++;
           }
           else
           count--;
           if(count<0)
           {
               sum+=pos[p]-i;
               swap(S[i],S[pos[p]]);
               p++;
               count=1;
           }
       }
       return sum;
    }